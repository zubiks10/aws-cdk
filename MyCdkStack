import * as cdk from 'aws-cdk-lib';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as events from 'aws-cdk-lib/aws-lambda-event-sources';
import * as path from 'path';

export class MyCdkStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Create an S3 bucket
    const bucket = new s3.Bucket(this, 'MyBucket', {
      removalPolicy: cdk.RemovalPolicy.DESTROY // Note: This is just for demo, use with caution in production
    });

    // Define the Lambda function
    const lambdaFunction = new lambda.Function(this, 'MyLambdaFunction', {
      runtime: lambda.Runtime.NODEJS_14_X,
      handler: 'index.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, 'lambda')), // Folder containing the Lambda code
      environment: {
        BUCKET_NAME: bucket.bucketName // Pass the bucket name as an environment variable
      }
    });

    // Grant the Lambda function permissions to read from the S3 bucket
    bucket.grantReadWrite(lambdaFunction);

    // Create an S3 event notification for the Lambda function
    lambdaFunction.addEventSource(new events.S3EventSource(bucket, {
      events: [s3.EventType.OBJECT_CREATED] // Trigger the Lambda when a new object is created
    }));
  }
}

const app = new cdk.App();
new MyCdkStack(app, 'MyCdkStack');
